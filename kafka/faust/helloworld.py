"""
    this is a sample app copied from faust source repo. 

    I tested 2 additional features

    - sink/alert_me: a callable registered with an Agent which must yield a value that the sinks know how to process
    - command/send_value: run command line => faust -A helloworld send_value

"""
import datetime

import faust

# your kafka host and port
my_kafka_broker_host = '192.168.0.48'
my_kafka_broker_port = 9092

class Greeting(faust.Record):
    """
        model
    """
    from_name: str # python 3.6 type annotation
    to_name: str # python 3.6 type annotation
    sent_at: datetime.datetime # python 3.6 type annotation

app = faust.App('hello-app', broker=f"kafka://{my_kafka_broker_host}:{my_kafka_broker_port}")
topic = app.topic('hello-topic', value_type=Greeting, value_serializer="json")

def alert_me(val:Greeting):
    """
        Acting as sink that can be used as monitor, logging, insert to a db
    """
    print(f"generated by alert_me [sink] => {val!r}")

@app.agent(topic, sink=[alert_me])
async def hello(greetings):
    """
        Agent
    """
    async for greeting in greetings:
        print(f'Hello from {greeting.from_name} to {greeting.to_name}')
        yield greeting

@app.timer(interval=10.0)
async def example_sender():
    """
        generate some data with a periodic job
    """
    await hello.send(
        value=Greeting(from_name='Faust', to_name='you', sent_at=datetime.datetime.now()),
    )

@app.command()
async def send_value():
    """
        use command line to send => faust -A helloworld send_value
    """
    await topic.send(
        value=Greeting(from_name='Bruno', to_name='you', sent_at=datetime.datetime.now()),
    )

if __name__ == '__main__':
    app.main()